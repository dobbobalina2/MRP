#!/usr/bin/env node
import {
  error
} from "./chunk-3XEDX7DR.js";
import "./chunk-UICA3PK6.js";

// src/cli.ts
import { cac } from "cac";

// package.json
var package_default = {
  name: "@wagmi/cli",
  description: "Manage and generate code from Ethereum ABIs",
  license: "MIT",
  version: "1.5.2",
  repository: {
    type: "git",
    url: "https://github.com/wagmi-dev/wagmi.git",
    directory: "packages/cli"
  },
  contributors: [
    "awkweb.eth <t@wagmi.sh>",
    "jxom.eth <j@wagmi.sh>"
  ],
  ethereum: "wagmi-dev.eth",
  funding: [
    {
      type: "gitcoin",
      url: "https://gitcoin.co/grants/4493/wagmi-react-hooks-library-for-ethereum"
    },
    {
      type: "github",
      url: "https://github.com/sponsors/wagmi-dev"
    }
  ],
  bin: {
    wagmi: "./dist/cli.js"
  },
  type: "module",
  main: "dist/index.js",
  types: "dist/index.d.ts",
  exports: {
    ".": {
      types: "./dist/index.d.ts",
      default: "./dist/index.js"
    },
    "./config": {
      types: "./dist/config.d.ts",
      default: "./dist/config.js"
    },
    "./plugins": {
      types: "./dist/plugins/index.d.ts",
      default: "./dist/plugins/index.js"
    },
    "./package.json": "./package.json"
  },
  sideEffects: false,
  files: [
    "/config",
    "/plugins",
    "/dist"
  ],
  peerDependencies: {
    "@wagmi/core": ">=1.0.0",
    typescript: ">=5.0.4",
    wagmi: ">=1.0.0"
  },
  peerDependenciesMeta: {
    "@wagmi/core": {
      optional: true
    },
    typescript: {
      optional: true
    },
    wagmi: {
      optional: true
    }
  },
  dependencies: {
    abitype: "0.8.7",
    "abort-controller": "^3.0.0",
    "bundle-require": "^3.1.2",
    cac: "^6.7.12",
    "change-case": "^4.1.2",
    chokidar: "^3.5.3",
    dedent: "^0.7.0",
    "detect-package-manager": "^2.0.1",
    dotenv: "^16.0.3",
    "dotenv-expand": "^10.0.0",
    esbuild: "0.16.17",
    execa: "^6.1.0",
    "find-up": "^6.3.0",
    "fs-extra": "^10.1.0",
    globby: "^13.1.3",
    "node-fetch": "^3.3.0",
    ora: "^6.1.2",
    pathe: "^1.0.0",
    picocolors: "^1.0.0",
    prettier: "^2.8.1",
    viem: "^1.0.0",
    zod: "^3.21.4"
  },
  devDependencies: {
    "@types/dedent": "^0.7.0",
    "@types/fs-extra": "^9.0.13",
    fixturez: "^1.1.0"
  },
  engines: {
    node: ">=14"
  },
  keywords: [
    "eth",
    "ethereum",
    "dapps",
    "wallet",
    "web3"
  ],
  scripts: {
    build: "tsup",
    dev: "tsup"
  }
};

// src/cli.ts
var cli = cac("wagmi");
cli.command("generate", "generate code based on configuration").option("-c, --config <path>", "[string] path to config file").option("-r, --root <path>", "[string] root path").option("-w, --watch", "[boolean] watch for changes").example((name) => `${name} generate`).action(async (options) => {
  const { generate } = await import("./commands-3ZL7EJLE.js");
  await generate(options);
});
cli.command("init", "create configuration file").option("-c, --config <path>", "[string] path to config file").option("-r, --root <path>", "[string] root path").example((name) => `${name} init`).action(async (options) => {
  const { init } = await import("./commands-3ZL7EJLE.js");
  await init(options);
});
cli.help();
cli.version(package_default.version);
void (async () => {
  try {
    cli.parse(process.argv, { run: false });
    if (!cli.matchedCommand) {
      if (cli.args.length === 0)
        cli.outputHelp();
      else
        throw new Error(`Unknown command: ${cli.args.join(" ")}`);
    }
    await cli.runMatchedCommand();
  } catch (error2) {
    error(`
${error2.message}`);
    process.exit(1);
  }
})();
